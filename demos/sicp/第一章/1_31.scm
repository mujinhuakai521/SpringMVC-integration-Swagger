(define (product term a next b)
        (if (> a b)
            1
            (* (term a) (product term (next a) next b))
        )
)

(define (product2 term a next b)
        (define (iter a result)
                (if (> a b)
                    result
                    (iter (next a) (* result (term a)))
                )
        )
        (iter a 1)
)

(define (factorial n)
        (product (lambda (x) x)
                  1
                  (lambda (i) (+ i 1))
                  n
        )
)

(define (pi n)
        (define (up-number k)
                (if (= k 1)
                    2
                    (if (odd? k)
                        (+ k 1)
                        (+ k 2)
                    )
                )
        )
        (define (down-number k)
                (if  (odd? k)
                     (+ k 2)
                     (+ k 1)
                )
        )
        (define (next k)
                (+ k 1)
        )
        (* 4 (exact->inexact (/ (product up-number 1 next n)
                                 (product down-number 1 next n)
                            )
             )
        )
)
